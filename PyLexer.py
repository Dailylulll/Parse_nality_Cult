# Generated from PyLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,238,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,4,0,71,8,0,11,0,12,0,72,1,0,1,0,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,3,2,84,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,3,3,97,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,110,
        8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,173,8,24,1,25,1,25,
        1,26,1,26,4,26,179,8,26,11,26,12,26,180,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,192,8,27,1,28,1,28,1,28,1,28,1,29,4,29,
        199,8,29,11,29,12,29,200,1,29,5,29,204,8,29,10,29,12,29,207,9,29,
        1,29,1,29,1,30,1,30,5,30,213,8,30,10,30,12,30,216,9,30,1,31,1,31,
        1,31,1,31,1,32,1,32,5,32,224,8,32,10,32,12,32,227,9,32,1,32,1,32,
        1,33,1,33,4,33,233,8,33,11,33,12,33,234,1,33,1,33,1,205,0,34,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,
        51,0,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,1,0,10,2,0,
        12,13,32,32,2,0,10,10,13,13,4,0,37,37,42,43,45,45,47,47,2,0,60,60,
        62,62,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,32,33,35,38,40,126,1,0,34,34,10,0,10,10,13,13,32,32,39,39,
        44,44,46,46,48,57,65,90,95,95,97,122,254,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,
        70,1,0,0,0,3,76,1,0,0,0,5,83,1,0,0,0,7,96,1,0,0,0,9,98,1,0,0,0,11,
        109,1,0,0,0,13,111,1,0,0,0,15,113,1,0,0,0,17,115,1,0,0,0,19,117,
        1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,0,0,0,27,125,1,0,
        0,0,29,127,1,0,0,0,31,130,1,0,0,0,33,135,1,0,0,0,35,140,1,0,0,0,
        37,144,1,0,0,0,39,150,1,0,0,0,41,156,1,0,0,0,43,159,1,0,0,0,45,163,
        1,0,0,0,47,167,1,0,0,0,49,172,1,0,0,0,51,174,1,0,0,0,53,176,1,0,
        0,0,55,191,1,0,0,0,57,193,1,0,0,0,59,198,1,0,0,0,61,210,1,0,0,0,
        63,217,1,0,0,0,65,221,1,0,0,0,67,230,1,0,0,0,69,71,7,0,0,0,70,69,
        1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,
        74,75,6,0,0,0,75,2,1,0,0,0,76,77,7,1,0,0,77,4,1,0,0,0,78,79,5,32,
        0,0,79,80,5,32,0,0,80,81,5,32,0,0,81,84,5,32,0,0,82,84,5,9,0,0,83,
        78,1,0,0,0,83,82,1,0,0,0,84,6,1,0,0,0,85,97,5,61,0,0,86,87,5,43,
        0,0,87,97,5,61,0,0,88,89,5,45,0,0,89,97,5,61,0,0,90,91,5,42,0,0,
        91,97,5,61,0,0,92,93,5,47,0,0,93,97,5,61,0,0,94,95,5,37,0,0,95,97,
        5,61,0,0,96,85,1,0,0,0,96,86,1,0,0,0,96,88,1,0,0,0,96,90,1,0,0,0,
        96,92,1,0,0,0,96,94,1,0,0,0,97,8,1,0,0,0,98,99,7,2,0,0,99,10,1,0,
        0,0,100,101,5,61,0,0,101,110,5,61,0,0,102,103,5,33,0,0,103,110,5,
        61,0,0,104,105,5,60,0,0,105,110,5,61,0,0,106,107,5,62,0,0,107,110,
        5,61,0,0,108,110,7,3,0,0,109,100,1,0,0,0,109,102,1,0,0,0,109,104,
        1,0,0,0,109,106,1,0,0,0,109,108,1,0,0,0,110,12,1,0,0,0,111,112,5,
        91,0,0,112,14,1,0,0,0,113,114,5,93,0,0,114,16,1,0,0,0,115,116,5,
        40,0,0,116,18,1,0,0,0,117,118,5,41,0,0,118,20,1,0,0,0,119,120,5,
        44,0,0,120,22,1,0,0,0,121,122,5,46,0,0,122,24,1,0,0,0,123,124,5,
        58,0,0,124,26,1,0,0,0,125,126,5,35,0,0,126,28,1,0,0,0,127,128,5,
        105,0,0,128,129,5,102,0,0,129,30,1,0,0,0,130,131,5,101,0,0,131,132,
        5,108,0,0,132,133,5,105,0,0,133,134,5,102,0,0,134,32,1,0,0,0,135,
        136,5,101,0,0,136,137,5,108,0,0,137,138,5,115,0,0,138,139,5,101,
        0,0,139,34,1,0,0,0,140,141,5,102,0,0,141,142,5,111,0,0,142,143,5,
        114,0,0,143,36,1,0,0,0,144,145,5,119,0,0,145,146,5,104,0,0,146,147,
        5,105,0,0,147,148,5,108,0,0,148,149,5,101,0,0,149,38,1,0,0,0,150,
        151,5,114,0,0,151,152,5,97,0,0,152,153,5,110,0,0,153,154,5,103,0,
        0,154,155,5,101,0,0,155,40,1,0,0,0,156,157,5,105,0,0,157,158,5,110,
        0,0,158,42,1,0,0,0,159,160,5,110,0,0,160,161,5,111,0,0,161,162,5,
        116,0,0,162,44,1,0,0,0,163,164,5,97,0,0,164,165,5,110,0,0,165,166,
        5,100,0,0,166,46,1,0,0,0,167,168,5,111,0,0,168,169,5,114,0,0,169,
        48,1,0,0,0,170,173,5,45,0,0,171,173,1,0,0,0,172,170,1,0,0,0,172,
        171,1,0,0,0,173,50,1,0,0,0,174,175,7,4,0,0,175,52,1,0,0,0,176,178,
        3,49,24,0,177,179,3,51,25,0,178,177,1,0,0,0,179,180,1,0,0,0,180,
        178,1,0,0,0,180,181,1,0,0,0,181,54,1,0,0,0,182,183,5,84,0,0,183,
        184,5,114,0,0,184,185,5,117,0,0,185,192,5,101,0,0,186,187,5,70,0,
        0,187,188,5,97,0,0,188,189,5,108,0,0,189,190,5,115,0,0,190,192,5,
        101,0,0,191,182,1,0,0,0,191,186,1,0,0,0,192,56,1,0,0,0,193,194,5,
        39,0,0,194,195,5,39,0,0,195,196,5,39,0,0,196,58,1,0,0,0,197,199,
        5,35,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,
        1,0,0,0,201,205,1,0,0,0,202,204,9,0,0,0,203,202,1,0,0,0,204,207,
        1,0,0,0,205,206,1,0,0,0,205,203,1,0,0,0,206,208,1,0,0,0,207,205,
        1,0,0,0,208,209,5,10,0,0,209,60,1,0,0,0,210,214,7,5,0,0,211,213,
        7,6,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
        1,0,0,0,215,62,1,0,0,0,216,214,1,0,0,0,217,218,5,39,0,0,218,219,
        7,7,0,0,219,220,5,39,0,0,220,64,1,0,0,0,221,225,5,34,0,0,222,224,
        8,8,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,34,0,0,229,66,
        1,0,0,0,230,232,3,57,28,0,231,233,7,9,0,0,232,231,1,0,0,0,233,234,
        1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,
        3,57,28,0,237,68,1,0,0,0,13,0,72,83,96,109,172,180,191,200,205,214,
        225,234,1,6,0,0
    ]

class PyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    NEWLINE = 2
    TAB = 3
    ASSIGNMENT = 4
    OPERATOR = 5
    CONDITION = 6
    LBRA = 7
    RBRA = 8
    LPAR = 9
    RPAR = 10
    COMMA = 11
    PERIOD = 12
    COLON = 13
    POUND = 14
    IF = 15
    ELIF = 16
    ELSE = 17
    FOR = 18
    WHILE = 19
    RANGE = 20
    IN = 21
    NOT = 22
    AND = 23
    OR = 24
    INT = 25
    BOOL = 26
    TICK3 = 27
    COMMENT = 28
    ID = 29
    CHAR = 30
    STRING = 31
    BC = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'('", "')'", "','", "'.'", "':'", "'#'", "'if'", 
            "'elif'", "'else'", "'for'", "'while'", "'range'", "'in'", "'not'", 
            "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "NEWLINE", "TAB", "ASSIGNMENT", "OPERATOR", "CONDITION", 
            "LBRA", "RBRA", "LPAR", "RPAR", "COMMA", "PERIOD", "COLON", 
            "POUND", "IF", "ELIF", "ELSE", "FOR", "WHILE", "RANGE", "IN", 
            "NOT", "AND", "OR", "INT", "BOOL", "TICK3", "COMMENT", "ID", 
            "CHAR", "STRING", "BC" ]

    ruleNames = [ "WS", "NEWLINE", "TAB", "ASSIGNMENT", "OPERATOR", "CONDITION", 
                  "LBRA", "RBRA", "LPAR", "RPAR", "COMMA", "PERIOD", "COLON", 
                  "POUND", "IF", "ELIF", "ELSE", "FOR", "WHILE", "RANGE", 
                  "IN", "NOT", "AND", "OR", "NEG", "DIGIT", "INT", "BOOL", 
                  "TICK3", "COMMENT", "ID", "CHAR", "STRING", "BC" ]

    grammarFileName = "PyLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


