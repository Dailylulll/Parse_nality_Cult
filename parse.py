# usage: parse.py FILE

import sys
import os.path
from antlr4 import *

# generated by antlr:
from PyLexer import PyLexer
from PyParser import PyParser

from preprocessor import preprocess

def main():
    if len(sys.argv) != 2:
        print("usage: parse.py FILE")
        sys.exit(1)

    fp = sys.argv[1]

    # indent_stack = 0
    # with open(fp, 'r') as infile:
    #     with open('tmp.txt', 'w') as outfile:
    #         for line in infile:
    #             tab_count = 0
    #             for char in line:
    #                 if char == '\t':
    #                     tab_count += 1
    #                 else:
    #                     break
    #             new_line = None
    #             if tab_count > indent_stack:
    #                 indent_stack += 1
    #                 new_line = "indent " + line[tab_count:]
    #             elif tab_count < indent_stack:
    #                 new_line = line[tab_count:]
    #                 for i in range(indent_stack - tab_count):
    #                     new_line = "dedent " + new_line
    #                     indent_stack -= 1
    #             else:
    #                 new_line = line[tab_count:]
    #             outfile.write(new_line)
    #         while indent_stack > 0:
    #             outfile.write("dedent\n")
    #             indent_stack -= 1

    with open(fp, "r") as f:
        script = f.read()
    p_script = preprocess(script)

    with open(os.path.join(os.path.dirname(fp), "preprocessed_" + os.path.basename(fp)), "w") as f:
        f.write(p_script)

    ins = InputStream(p_script)
    lexer = PyLexer(ins)
    stream = CommonTokenStream(lexer)
    parser = PyParser(stream)
    tree = parser.program()

    errors = parser.getNumberOfSyntaxErrors()
    if errors > 0:
        print(f"{errors} syntax errors")
        sys.exit(1)

    print(tree.toStringTree(recog=parser).replace("\\n", "\n"))

if __name__ == "__main__":
    main()
